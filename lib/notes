- show help but exit with 1 status when mis-used

- show help and exit with 0 status when help menu calledo

- capital of short flag boolean should by default invert the boolean, or
at least allow this behavior

- allow configuring a flag to be used multiple times, e.g. ack
  --ignore-directory=foo --ignore-directory=bar
    maybe something like
    module Ack
      module Cli
        flag :ignore_directory, type: String, multiple: true
        flag :ignore_directory, type: String, allow_multiple: true

        or

        flags :ignore_directory, type: String # where the plural of flags would mean it accepts multiple

- Should arguments cascade?

- change subcommands dsl from .mount to .mount_to, or .mount_at
  or have the supercommand mount the subcommand, but this would be a
  problem when loading because we'd be trying to mount subcommands that
  probably aren't loaded yet

- consider having Namespace or Group or something in addition to commands
like a command that can't be called

# argv =[
#   '-f', 'some_flag_value',     # flag with value separated by space
#    '-fsome_flag_value',        # flag with value no separation
#    '-f=some_flag_value',       # equals separation
#    '--flagsome_value',         # long no separation
#    '--complex-flagsome_value', # multiple word flag no separation
#    '--flag', '--some-other-flag'
# ]

# patterns
# It's a flag if it starts with a dash
# It's a value if it doesn't
# It's a flag with a value potentially even if it starts with a dash
# It's multiple flags if it starts with a single dash and has multiple chars
# Maybe just don't support values with no separation
# You have to pass in expected flags because otherwise you won't
# know if a flag with a following word is the flag value or an
# argument, e.g.
#   `echo -n taco` # Is taco the value of -v or the argument to the
#   program





# use   'echo [string to echo]'
# short 'Echo anything to the screen'
# long  'Echo is for echoing anything back to the screen'
# flag  :newline, :n, type: Boolean, default: false, scope: :local # Local default? yea probably; Boolean or :boolean?

# flag :market,   :m, options: ['US', 'UK'], default: nil
# flag :revision, :r # Default type to string
# flag :revision, :r, type: :string
# flag :ignore_unreleasable_revision, type: :boolean, default: false

# THOR example:
# desc          'announce_release', 'Get most recent releasable sha'
# method_option :market, aliases: '-m', enum: %w(US UK), required: true
# method_option :revision, aliases: '-r'
# method_option :ignore_unreleasable_revision, type: :boolean, default: false

